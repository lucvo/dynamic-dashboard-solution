"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const load_hook_1 = require("../ext/load-hook");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const webpackMerge = require("webpack-merge");
function runBuilderHandler(options, transforms, context, builderHandler, configTransformerName = 'webpackConfiguration') {
    let plugin = null;
    if (options.plugin) {
        plugin = load_hook_1.loadHook(options.plugin);
    }
    setupConfigHook(transforms, options, context, plugin, configTransformerName);
    if (plugin && plugin.pre) {
        plugin.pre(options);
    }
    const result = asObservable(builderHandler(options, context, transforms));
    return result.pipe(operators_1.tap(_ => {
        if (plugin && plugin.post) {
            plugin.post(options);
        }
    }));
}
exports.runBuilderHandler = runBuilderHandler;
function asObservable(result) {
    if (rxjs_1.isObservable(result)) {
        return result;
    }
    if (result instanceof Promise) {
        return rxjs_1.from(result);
    }
    return rxjs_1.of(result);
}
function setupConfigHook(transforms, options, context, plugin, configTransformerName = 'webpackConfiguration') {
    const originalConfigFn = transforms[configTransformerName];
    transforms[configTransformerName] = (config) => {
        if (options.singleBundle) {
            if (!options.keepPolyfills && config.entry && config.entry['polyfills']) {
                delete config.entry['polyfills'];
            }
            if (!options.keepPolyfills && config.entry && config.entry['polyfills-es5']) {
                delete config.entry['polyfills-es5'];
            }
            if (config.optimization) {
                delete config.optimization.runtimeChunk;
                delete config.optimization.splitChunks;
            }
        }
        const keepStyles = options.bundleStyles || options.keepStyles;
        if (options.singleBundle && !keepStyles && config.entry && config.entry['styles']) {
            delete config.entry['styles'];
        }
        if (options.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(core_1.normalize(context.workspaceRoot)), options.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config, options);
        }
        if (options.configHook) {
            const hook = load_hook_1.loadHook(options.configHook);
            config = hook(config);
        }
        if (originalConfigFn) {
            return originalConfigFn(config);
        }
        else {
            return config;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNyYy91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtCQUE4QztBQUM5Qyw4Q0FBcUM7QUFFckMsZ0RBQTRDO0FBQzVDLCtDQUFnRTtBQUVoRSw2QkFBNkI7QUFDN0IsOENBQThDO0FBVzlDLFNBQWdCLGlCQUFpQixDQUFDLE9BQVksRUFBRSxVQUFzQixFQUFFLE9BQXVCLEVBQUUsY0FBeUMsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFeEwsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztJQUNqQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDbEIsTUFBTSxHQUFHLG9CQUFRLENBQVMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzNDO0lBRUQsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBRTdFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNyQjtJQUVELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRTFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDekIsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVOLENBQUM7QUFyQkQsOENBcUJDO0FBRUQsU0FBUyxZQUFZLENBQUMsTUFBeUI7SUFDN0MsSUFBSSxtQkFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxNQUFNLFlBQVksT0FBTyxFQUFFO1FBQzdCLE9BQU8sV0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxTQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFVBQXNCLEVBQUUsT0FBWSxFQUFFLE9BQXVCLEVBQUUsTUFBcUIsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0I7SUFFM0osTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMzRCxVQUFVLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLE1BQTZCLEVBQUUsRUFBRTtRQUVwRSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUN2RSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEM7WUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQzNFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUN0QztZQUNELElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtnQkFDdkIsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztnQkFDeEMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQzthQUN4QztTQUNGO1FBRUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDO1FBRTlELElBQUksT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDakYsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxPQUFPLENBQUMsa0JBQWtCLEVBQUU7WUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBYSxDQUFDLGdCQUFTLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDM0csTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0MsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzNCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUNwQixNQUFNLElBQUksR0FBRyxvQkFBUSxDQUFlLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN4RCxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pDO2FBQ0k7WUFDSCxPQUFPLE1BQU0sQ0FBQztTQUNmO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4ZWN1dGlvblRyYW5zZm9ybWVyIH0gZnJvbSBcIkBhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyXCI7XHJcbmltcG9ydCB7IEJ1aWxkZXJDb250ZXh0LCBCdWlsZGVyT3V0cHV0TGlrZSB9IGZyb20gXCJAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0XCI7XHJcbmltcG9ydCB7IG9mLCBmcm9tLCBpc09ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvbmZpZ0hvb2tGbiB9IGZyb20gXCIuLi9leHQvaG9va1wiO1xyXG5pbXBvcnQgeyBsb2FkSG9vayB9IGZyb20gXCIuLi9leHQvbG9hZC1ob29rXCI7XHJcbmltcG9ydCB7IGdldFN5c3RlbVBhdGgsIG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcclxuaW1wb3J0ICogYXMgd2VicGFjayBmcm9tICd3ZWJwYWNrJztcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0ICogYXMgd2VicGFja01lcmdlIGZyb20gJ3dlYnBhY2stbWVyZ2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2Zvcm1zIHtcclxuICB3ZWJwYWNrQ29uZmlndXJhdGlvbj86IEV4ZWN1dGlvblRyYW5zZm9ybWVyPHdlYnBhY2suQ29uZmlndXJhdGlvbj47XHJcbiBcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCdWlsZGVySGFuZGxlclBsdXNGbjxBPiB7XHJcbiAgKGlucHV0OiBBLCBjb250ZXh0OiBCdWlsZGVyQ29udGV4dCwgdHJhbnNmb3JtczogVHJhbnNmb3Jtcyk6IEJ1aWxkZXJPdXRwdXRMaWtlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcnVuQnVpbGRlckhhbmRsZXIob3B0aW9uczogYW55LCB0cmFuc2Zvcm1zOiBUcmFuc2Zvcm1zLCBjb250ZXh0OiBCdWlsZGVyQ29udGV4dCwgYnVpbGRlckhhbmRsZXI6IEJ1aWxkZXJIYW5kbGVyUGx1c0ZuPGFueT4sIGNvbmZpZ1RyYW5zZm9ybWVyTmFtZSA9ICd3ZWJwYWNrQ29uZmlndXJhdGlvbicpIHtcclxuICBcclxuICBsZXQgcGx1Z2luOiBQbHVnaW4gfCBudWxsID0gbnVsbDtcclxuICBpZiAob3B0aW9ucy5wbHVnaW4pIHtcclxuICAgIHBsdWdpbiA9IGxvYWRIb29rPFBsdWdpbj4ob3B0aW9ucy5wbHVnaW4pO1xyXG4gIH1cclxuXHJcbiAgc2V0dXBDb25maWdIb29rKHRyYW5zZm9ybXMsIG9wdGlvbnMsIGNvbnRleHQsIHBsdWdpbiwgY29uZmlnVHJhbnNmb3JtZXJOYW1lKTtcclxuXHJcbiAgaWYgKHBsdWdpbiAmJiBwbHVnaW4ucHJlKSB7XHJcbiAgICBwbHVnaW4ucHJlKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVzdWx0ID0gYXNPYnNlcnZhYmxlKGJ1aWxkZXJIYW5kbGVyKG9wdGlvbnMsIGNvbnRleHQsIHRyYW5zZm9ybXMpKTtcdFxyXG5cclxuICByZXR1cm4gcmVzdWx0LnBpcGUodGFwKF8gPT4ge1x0XHJcbiAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5wb3N0KSB7XHRcclxuICAgICAgcGx1Z2luLnBvc3Qob3B0aW9ucyk7XHRcclxuICAgIH1cdFxyXG4gIH0pKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzT2JzZXJ2YWJsZShyZXN1bHQ6IEJ1aWxkZXJPdXRwdXRMaWtlKSB7XHJcbiAgaWYgKGlzT2JzZXJ2YWJsZShyZXN1bHQpKSB7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICByZXR1cm4gZnJvbShyZXN1bHQpO1xyXG4gIH1cclxuICByZXR1cm4gb2YocmVzdWx0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0dXBDb25maWdIb29rKHRyYW5zZm9ybXM6IFRyYW5zZm9ybXMsIG9wdGlvbnM6IGFueSwgY29udGV4dDogQnVpbGRlckNvbnRleHQsIHBsdWdpbjogUGx1Z2luIHwgbnVsbCwgY29uZmlnVHJhbnNmb3JtZXJOYW1lID0gJ3dlYnBhY2tDb25maWd1cmF0aW9uJykge1xyXG4gIFxyXG4gIGNvbnN0IG9yaWdpbmFsQ29uZmlnRm4gPSB0cmFuc2Zvcm1zW2NvbmZpZ1RyYW5zZm9ybWVyTmFtZV07XHJcbiAgdHJhbnNmb3Jtc1tjb25maWdUcmFuc2Zvcm1lck5hbWVdID0gKGNvbmZpZzogd2VicGFjay5Db25maWd1cmF0aW9uKSA9PiB7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuc2luZ2xlQnVuZGxlKSB7XHJcbiAgICAgIGlmICghb3B0aW9ucy5rZWVwUG9seWZpbGxzICYmIGNvbmZpZy5lbnRyeSAmJiBjb25maWcuZW50cnlbJ3BvbHlmaWxscyddKSB7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeVsncG9seWZpbGxzJ107XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFvcHRpb25zLmtlZXBQb2x5ZmlsbHMgJiYgY29uZmlnLmVudHJ5ICYmIGNvbmZpZy5lbnRyeVsncG9seWZpbGxzLWVzNSddKSB7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeVsncG9seWZpbGxzLWVzNSddO1xyXG4gICAgICB9ICAgICAgXHJcbiAgICAgIGlmIChjb25maWcub3B0aW1pemF0aW9uKSB7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5vcHRpbWl6YXRpb24ucnVudGltZUNodW5rO1xyXG4gICAgICAgIGRlbGV0ZSBjb25maWcub3B0aW1pemF0aW9uLnNwbGl0Q2h1bmtzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga2VlcFN0eWxlcyA9IG9wdGlvbnMuYnVuZGxlU3R5bGVzIHx8IG9wdGlvbnMua2VlcFN0eWxlcztcclxuXHJcbiAgICBpZiAob3B0aW9ucy5zaW5nbGVCdW5kbGUgJiYgIWtlZXBTdHlsZXMgJiYgY29uZmlnLmVudHJ5ICYmIGNvbmZpZy5lbnRyeVsnc3R5bGVzJ10pIHtcclxuICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeVsnc3R5bGVzJ107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuZXh0cmFXZWJwYWNrQ29uZmlnKSB7XHJcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGdldFN5c3RlbVBhdGgobm9ybWFsaXplKGNvbnRleHQud29ya3NwYWNlUm9vdCkpLCBvcHRpb25zLmV4dHJhV2VicGFja0NvbmZpZyk7XHJcbiAgICAgIGNvbnN0IGFkZGl0aW9uYWxDb25maWcgPSByZXF1aXJlKGZpbGVQYXRoKTtcclxuICAgICAgY29uZmlnID0gd2VicGFja01lcmdlKFtjb25maWcsIGFkZGl0aW9uYWxDb25maWddKTtcclxuICAgIH1cclxuICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLmNvbmZpZykge1xyXG4gICAgICBjb25maWcgPSBwbHVnaW4uY29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuY29uZmlnSG9vaykge1xyXG4gICAgICAgIGNvbnN0IGhvb2sgPSBsb2FkSG9vazxDb25maWdIb29rRm4+KG9wdGlvbnMuY29uZmlnSG9vayk7XHJcbiAgICAgICAgY29uZmlnID0gaG9vayhjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcmlnaW5hbENvbmZpZ0ZuKSB7XHJcbiAgICAgIHJldHVybiBvcmlnaW5hbENvbmZpZ0ZuKGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==
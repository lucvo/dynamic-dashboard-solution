"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@schematics/angular/utility/config");
function addNgxBuildPlus(_options) {
    return (tree, _context) => {
        const project = _options.project;
        const workspace = config_1.getWorkspace(tree);
        const architect = workspace.projects[project].architect;
        if (!architect)
            throw new Error(`expected node projects/${project}/architect in angular.json`);
        const build = architect.build;
        if (!build)
            throw new Error(`expected node projects/${project}/architect/build in angular.json`);
        // Custom Builders are not part of the CLI's enum
        build.builder = 'ngx-build-plus:browser';
        const serve = architect.serve;
        if (!serve)
            throw new Error(`expected node projects/${project}/architect/serve in angular.json`);
        serve.builder = 'ngx-build-plus:dev-server';
        const test = architect.test;
        if (!test)
            throw new Error(`expected node projects/${project}/architect/test in angular.json`);
        test.builder = 'ngx-build-plus:karma';
        return config_1.updateWorkspace(workspace);
    };
}
exports.addNgxBuildPlus = addNgxBuildPlus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNjaGVtYXRpY3MvYWRkLW5neC1idWlsZC1wbHVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0RBQW1GO0FBRW5GLFNBQWdCLGVBQWUsQ0FBQyxRQUFhO0lBQzNDLE9BQU8sQ0FBQyxJQUFVLEVBQUUsUUFBMEIsRUFBRSxFQUFFO1FBRWhELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDakMsTUFBTSxTQUFTLEdBQUcscUJBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyQyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN4RCxJQUFJLENBQUMsU0FBUztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLE9BQU8sNEJBQTRCLENBQUMsQ0FBQztRQUUvRixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxLQUFLO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsT0FBTyxrQ0FBa0MsQ0FBQyxDQUFDO1FBRWpHLGlEQUFpRDtRQUNqRCxLQUFLLENBQUMsT0FBTyxHQUFRLHdCQUF3QixDQUFDO1FBRTlDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixPQUFPLGtDQUFrQyxDQUFDLENBQUM7UUFFakcsS0FBSyxDQUFDLE9BQU8sR0FBUSwyQkFBMkIsQ0FBQztRQUVqRCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsT0FBTyxpQ0FBaUMsQ0FBQyxDQUFDO1FBQy9GLElBQUksQ0FBQyxPQUFPLEdBQVEsc0JBQXNCLENBQUM7UUFFM0MsT0FBTyx3QkFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQztBQUNKLENBQUM7QUExQkQsMENBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnVsZSwgU2NoZW1hdGljQ29udGV4dCwgVHJlZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzJztcclxuaW1wb3J0IHsgZ2V0V29ya3NwYWNlLCB1cGRhdGVXb3Jrc3BhY2UgfSBmcm9tICdAc2NoZW1hdGljcy9hbmd1bGFyL3V0aWxpdHkvY29uZmlnJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGROZ3hCdWlsZFBsdXMoX29wdGlvbnM6IGFueSk6IFJ1bGUge1xyXG4gIHJldHVybiAodHJlZTogVHJlZSwgX2NvbnRleHQ6IFNjaGVtYXRpY0NvbnRleHQpID0+IHtcclxuICAgIFxyXG4gICAgY29uc3QgcHJvamVjdCA9IF9vcHRpb25zLnByb2plY3Q7XHJcbiAgICBjb25zdCB3b3Jrc3BhY2UgPSBnZXRXb3Jrc3BhY2UodHJlZSk7XHJcblxyXG4gICAgY29uc3QgYXJjaGl0ZWN0ID0gd29ya3NwYWNlLnByb2plY3RzW3Byb2plY3RdLmFyY2hpdGVjdDtcclxuICAgIGlmICghYXJjaGl0ZWN0KSB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkIG5vZGUgcHJvamVjdHMvJHtwcm9qZWN0fS9hcmNoaXRlY3QgaW4gYW5ndWxhci5qc29uYCk7XHJcblxyXG4gICAgY29uc3QgYnVpbGQgPSBhcmNoaXRlY3QuYnVpbGQ7XHJcbiAgICBpZiAoIWJ1aWxkKSB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkIG5vZGUgcHJvamVjdHMvJHtwcm9qZWN0fS9hcmNoaXRlY3QvYnVpbGQgaW4gYW5ndWxhci5qc29uYCk7XHJcblxyXG4gICAgLy8gQ3VzdG9tIEJ1aWxkZXJzIGFyZSBub3QgcGFydCBvZiB0aGUgQ0xJJ3MgZW51bVxyXG4gICAgYnVpbGQuYnVpbGRlciA9IDxhbnk+J25neC1idWlsZC1wbHVzOmJyb3dzZXInO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlID0gYXJjaGl0ZWN0LnNlcnZlO1xyXG4gICAgaWYgKCFzZXJ2ZSkgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCBub2RlIHByb2plY3RzLyR7cHJvamVjdH0vYXJjaGl0ZWN0L3NlcnZlIGluIGFuZ3VsYXIuanNvbmApO1xyXG5cclxuICAgIHNlcnZlLmJ1aWxkZXIgPSA8YW55PiduZ3gtYnVpbGQtcGx1czpkZXYtc2VydmVyJztcclxuXHJcbiAgICBjb25zdCB0ZXN0ID0gYXJjaGl0ZWN0LnRlc3Q7XHJcbiAgICBpZiAoIXRlc3QpIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgbm9kZSBwcm9qZWN0cy8ke3Byb2plY3R9L2FyY2hpdGVjdC90ZXN0IGluIGFuZ3VsYXIuanNvbmApO1xyXG4gICAgdGVzdC5idWlsZGVyID0gPGFueT4nbmd4LWJ1aWxkLXBsdXM6a2FybWEnO1xyXG5cclxuICAgIHJldHVybiB1cGRhdGVXb3Jrc3BhY2Uod29ya3NwYWNlKTtcclxuICB9O1xyXG59XHJcblxyXG4gICJdfQ==
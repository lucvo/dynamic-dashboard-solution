"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const spawn = require('cross-spawn');
// function npmInstall(options: any): Rule {
//   return function (tree: Tree, context: SchematicContext) {
//     spawn.sync('npm', ['install', options.package, options.switch], { stdio: 'inherit' });
//     return tree;
//   }
// }
function npmRun(options) {
    return function (tree, context) {
        spawn.sync('npm', ['run', options.script], { stdio: 'inherit' });
        return tree;
    };
}
exports.npmRun = npmRun;
function addWebComponentsPolyfill(_options) {
    return (tree, _context) => {
        const packageJson = loadPackageJson(tree);
        if (!packageJson['dependencies'] || !packageJson['dependencies']['@webcomponents/webcomponentsjs']) {
            _context.addTask(new tasks_1.NodePackageInstallTask({
                packageName: '@webcomponents/webcomponentsjs',
            }));
        }
        return schematics_1.chain([
            addScriptsToProject(tree, _options)
        ]);
    };
}
exports.addWebComponentsPolyfill = addWebComponentsPolyfill;
function addScriptsToProject(tree, options) {
    const workspace = config_1.getWorkspace(tree);
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    const project = workspace.projects[options.project];
    if (!project.architect || !project.architect.build || !project.architect.build.options) {
        return schematics_1.noop();
    }
    const buildOptions = project.architect.build.options;
    if (!buildOptions)
        return schematics_1.noop();
    if (!buildOptions.scripts) {
        buildOptions.scripts = [];
    }
    const scripts = buildOptions.scripts;
    if (!scripts.find(s => s.bundleName === 'polyfill-webcomp-es5')) {
        scripts.push({
            bundleName: 'polyfill-webcomp-es5',
            input: 'node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js'
        });
    }
    if (!scripts.find(s => s.bundleName === 'polyfill-webcomp')) {
        scripts.push({
            bundleName: 'polyfill-webcomp',
            input: 'node_modules/@webcomponents/webcomponentsjs/bundles/webcomponents-sd-ce-pf.js'
        });
    }
    return config_1.updateWorkspace(workspace);
}
function loadPackageJson(tree) {
    const pkg = tree.read('package.json');
    if (pkg === null)
        throw Error('could not read package.json');
    const contentAsString = pkg.toString('UTF-8');
    const config = JSON.parse(contentAsString);
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNjaGVtYXRpY3Mvd2ViY29tcG9uZW50cy1wb2x5ZmlsbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUE4STtBQUM5SSwrREFBbUY7QUFDbkYsNERBQTRGO0FBSTVGLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUVyQyw0Q0FBNEM7QUFDNUMsOERBQThEO0FBQzlELDZGQUE2RjtBQUM3RixtQkFBbUI7QUFDbkIsTUFBTTtBQUNOLElBQUk7QUFFSixTQUFnQixNQUFNLENBQUMsT0FBWTtJQUNqQyxPQUFPLFVBQVUsSUFBVSxFQUFFLE9BQXlCO1FBQ3BELEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUxELHdCQUtDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsUUFBYTtJQUNwRCxPQUFPLENBQUMsSUFBVSxFQUFFLFFBQTBCLEVBQUUsRUFBRTtRQUVoRCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUFFO1lBQ2xHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSw4QkFBc0IsQ0FBQztnQkFDMUMsV0FBVyxFQUFFLGdDQUFnQzthQUM5QyxDQUFDLENBQUMsQ0FBQztTQUNMO1FBRUQsT0FBTyxrQkFBSyxDQUFDO1lBQ1gsbUJBQW1CLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBZkQsNERBZUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLElBQVUsRUFBRSxPQUFZO0lBQ2pELE1BQU0sU0FBUyxHQUFHLHFCQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0RDtJQUNELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXBELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDdEYsT0FBTyxpQkFBSSxFQUFFLENBQUM7S0FDZjtJQUVELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQW9DLENBQUM7SUFFbEYsSUFBSSxDQUFDLFlBQVk7UUFBRSxPQUFPLGlCQUFJLEVBQUUsQ0FBQztJQUVqQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRTtRQUN6QixZQUFZLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztLQUMzQjtJQUVELE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUEwQyxDQUFDO0lBRXhFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxzQkFBc0IsQ0FBQyxFQUFFO1FBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDWCxVQUFVLEVBQUUsc0JBQXNCO1lBQ2xDLEtBQUssRUFBRSw0RUFBNEU7U0FDcEYsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssa0JBQWtCLENBQUMsRUFBRTtRQUMzRCxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ1gsVUFBVSxFQUFFLGtCQUFrQjtZQUM5QixLQUFLLEVBQUUsK0VBQStFO1NBQ3ZGLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyx3QkFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXRDLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxJQUFVO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEMsSUFBSSxHQUFHLEtBQUssSUFBSTtRQUNkLE1BQU0sS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDN0MsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzNDLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdWxlLCBTY2hlbWF0aWNDb250ZXh0LCBUcmVlLCBhcHBseSwgdXJsLCB0ZW1wbGF0ZSwgbW92ZSwgYnJhbmNoQW5kTWVyZ2UsIG1lcmdlV2l0aCwgY2hhaW4sIG5vb3AgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcyc7XHJcbmltcG9ydCB7IGdldFdvcmtzcGFjZSwgdXBkYXRlV29ya3NwYWNlIH0gZnJvbSAnQHNjaGVtYXRpY3MvYW5ndWxhci91dGlsaXR5L2NvbmZpZyc7XHJcbmltcG9ydCB7IFJ1blNjaGVtYXRpY1Rhc2ssIE5vZGVQYWNrYWdlSW5zdGFsbFRhc2sgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcy90YXNrcyc7XHJcbmltcG9ydCB7IEJyb3dzZXJCdWlsZGVyQmFzZU9wdGlvbnMgfSBmcm9tICdAc2NoZW1hdGljcy9hbmd1bGFyL3V0aWxpdHkvd29ya3NwYWNlLW1vZGVscyc7XHJcbmltcG9ydCB7IEFkdmFuY2VkU2NyaXB0Q29uZiB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuXHJcbmNvbnN0IHNwYXduID0gcmVxdWlyZSgnY3Jvc3Mtc3Bhd24nKTtcclxuXHJcbi8vIGZ1bmN0aW9uIG5wbUluc3RhbGwob3B0aW9uczogYW55KTogUnVsZSB7XHJcbi8vICAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlOiBUcmVlLCBjb250ZXh0OiBTY2hlbWF0aWNDb250ZXh0KSB7XHJcbi8vICAgICBzcGF3bi5zeW5jKCducG0nLCBbJ2luc3RhbGwnLCBvcHRpb25zLnBhY2thZ2UsIG9wdGlvbnMuc3dpdGNoXSwgeyBzdGRpbzogJ2luaGVyaXQnIH0pO1xyXG4vLyAgICAgcmV0dXJuIHRyZWU7XHJcbi8vICAgfVxyXG4vLyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbnBtUnVuKG9wdGlvbnM6IGFueSk6IFJ1bGUge1xyXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZTogVHJlZSwgY29udGV4dDogU2NoZW1hdGljQ29udGV4dCkge1xyXG4gICAgc3Bhd24uc3luYygnbnBtJywgWydydW4nLCBvcHRpb25zLnNjcmlwdF0sIHsgc3RkaW86ICdpbmhlcml0JyB9KTtcclxuICAgIHJldHVybiB0cmVlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFdlYkNvbXBvbmVudHNQb2x5ZmlsbChfb3B0aW9uczogYW55KTogUnVsZSB7XHJcbiAgcmV0dXJuICh0cmVlOiBUcmVlLCBfY29udGV4dDogU2NoZW1hdGljQ29udGV4dCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHBhY2thZ2VKc29uID0gbG9hZFBhY2thZ2VKc29uKHRyZWUpO1xyXG5cclxuICAgIGlmICghcGFja2FnZUpzb25bJ2RlcGVuZGVuY2llcyddIHx8ICFwYWNrYWdlSnNvblsnZGVwZW5kZW5jaWVzJ11bJ0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcyddKSB7XHJcbiAgICAgIF9jb250ZXh0LmFkZFRhc2sobmV3IE5vZGVQYWNrYWdlSW5zdGFsbFRhc2soe1xyXG4gICAgICAgIHBhY2thZ2VOYW1lOiAnQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzJyxcclxuICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaGFpbihbXHJcbiAgICAgIGFkZFNjcmlwdHNUb1Byb2plY3QodHJlZSwgX29wdGlvbnMpXHJcbiAgICBdKTsgXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkU2NyaXB0c1RvUHJvamVjdCh0cmVlOiBUcmVlLCBvcHRpb25zOiBhbnkpOiBSdWxlIHtcclxuICAgIGNvbnN0IHdvcmtzcGFjZSA9IGdldFdvcmtzcGFjZSh0cmVlKTtcclxuICAgIGlmICghb3B0aW9ucy5wcm9qZWN0KSB7XHJcbiAgICAgIG9wdGlvbnMucHJvamVjdCA9IE9iamVjdC5rZXlzKHdvcmtzcGFjZS5wcm9qZWN0cylbMF07XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9qZWN0ID0gd29ya3NwYWNlLnByb2plY3RzW29wdGlvbnMucHJvamVjdF07XHJcbiAgICBcclxuICAgIGlmICghcHJvamVjdC5hcmNoaXRlY3QgfHwgIXByb2plY3QuYXJjaGl0ZWN0LmJ1aWxkIHx8ICFwcm9qZWN0LmFyY2hpdGVjdC5idWlsZC5vcHRpb25zKSB7XHJcbiAgICAgIHJldHVybiBub29wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYnVpbGRPcHRpb25zID0gcHJvamVjdC5hcmNoaXRlY3QuYnVpbGQub3B0aW9ucyBhcyBCcm93c2VyQnVpbGRlckJhc2VPcHRpb25zO1xyXG5cclxuICAgIGlmICghYnVpbGRPcHRpb25zKSByZXR1cm4gbm9vcCgpO1xyXG4gICAgXHJcbiAgICBpZiAoIWJ1aWxkT3B0aW9ucy5zY3JpcHRzKSB7XHJcbiAgICAgIGJ1aWxkT3B0aW9ucy5zY3JpcHRzID0gW107XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHNjcmlwdHMgPSBidWlsZE9wdGlvbnMuc2NyaXB0cyBhcyB1bmtub3duIGFzIEFkdmFuY2VkU2NyaXB0Q29uZltdO1xyXG4gICAgXHJcbiAgICBpZiAoIXNjcmlwdHMuZmluZChzID0+IHMuYnVuZGxlTmFtZSA9PT0gJ3BvbHlmaWxsLXdlYmNvbXAtZXM1JykpIHtcclxuICAgICAgc2NyaXB0cy5wdXNoKHtcclxuICAgICAgICBidW5kbGVOYW1lOiAncG9seWZpbGwtd2ViY29tcC1lczUnLFxyXG4gICAgICAgIGlucHV0OiAnbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy9jdXN0b20tZWxlbWVudHMtZXM1LWFkYXB0ZXIuanMnXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIXNjcmlwdHMuZmluZChzID0+IHMuYnVuZGxlTmFtZSA9PT0gJ3BvbHlmaWxsLXdlYmNvbXAnKSkge1xyXG4gICAgICBzY3JpcHRzLnB1c2goe1xyXG4gICAgICAgIGJ1bmRsZU5hbWU6ICdwb2x5ZmlsbC13ZWJjb21wJyxcclxuICAgICAgICBpbnB1dDogJ25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvYnVuZGxlcy93ZWJjb21wb25lbnRzLXNkLWNlLXBmLmpzJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXBkYXRlV29ya3NwYWNlKHdvcmtzcGFjZSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkUGFja2FnZUpzb24odHJlZTogVHJlZSkge1xyXG4gIGNvbnN0IHBrZyA9IHRyZWUucmVhZCgncGFja2FnZS5qc29uJyk7XHJcbiAgaWYgKHBrZyA9PT0gbnVsbClcclxuICAgIHRocm93IEVycm9yKCdjb3VsZCBub3QgcmVhZCBwYWNrYWdlLmpzb24nKTtcclxuICBjb25zdCBjb250ZW50QXNTdHJpbmcgPSBwa2cudG9TdHJpbmcoJ1VURi04Jyk7XHJcbiAgY29uc3QgY29uZmlnID0gSlNPTi5wYXJzZShjb250ZW50QXNTdHJpbmcpO1xyXG4gIHJldHVybiBjb25maWc7XHJcbn1cclxuIl19
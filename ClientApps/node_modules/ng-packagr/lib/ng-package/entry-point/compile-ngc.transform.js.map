{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-package/entry-point/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA6B;AAC7B,iCAAiC;AACjC,2BAA2B;AAC3B,qDAAwE;AACxE,yEAAoE;AACpE,6DAAyD;AACzD,gDAAiE;AACjE,oCAAgF;AAChF,4EAAwE;AAE3D,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAExE,IAAI;QACF,MAAM,UAAU,GAAmB,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAC,CAAC;QACxE,MAAM,WAAW,GAAqB,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;QACjE,sCAAsC;QACtC,MAAM,QAAQ,GAAG,uCAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAErF,6BAA6B;QAC7B,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;QACnE,MAAM,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;QACxE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;QAC3E,MAAM,mBAAmB,GAAG,IAAI,0CAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;QAEzF,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS;YAC9C,CAAC,CAAC,IAAI,8BAAa,CAAC,mBAAmB,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC;YACzF,CAAC,CAAC,SAAS,CAAC;QAEd,MAAM,yCAAkB,CACtB,KAAK,EACL,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB;YACE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YAC7B,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YAC1C,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM;SAC/B,EACD,aAAa,CACd,CAAC;KACH;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;KACb;IAED,OAAO,CAAC,OAAO,EAAE,CAAC;IAClB,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport * as ora from 'ora';\nimport { Transform, transformFromPromise } from '../../graph/transform';\nimport { compileSourceFiles } from '../../ngc/compile-source-files';\nimport { NgccProcessor } from '../../ngc/ngcc-processor';\nimport { setDependenciesTsConfigPaths } from '../../ts/tsconfig';\nimport { isEntryPointInProgress, EntryPointNode, isEntryPoint } from '../nodes';\nimport { StylesheetProcessor } from '../../styles/stylesheet-processor';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  const spinner = ora().start(`Compiling TypeScript sources through NGC`);\n\n  try {\n    const entryPoint: EntryPointNode = graph.find(isEntryPointInProgress());\n    const entryPoints: EntryPointNode[] = graph.filter(isEntryPoint);\n    // Add paths mappings for dependencies\n    const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n    // Compile TypeScript sources\n    const { esm2015, declarations } = entryPoint.data.destinationFiles;\n    const { moduleResolutionCache, ngccProcessingCache } = entryPoint.cache;\n    const { basePath, cssUrl, styleIncludePaths } = entryPoint.data.entryPoint;\n    const stylesheetProcessor = new StylesheetProcessor(basePath, cssUrl, styleIncludePaths);\n\n    const ngccProcessor = tsConfig.options.enableIvy\n      ? new NgccProcessor(ngccProcessingCache, tsConfig.project, tsConfig.options, entryPoints)\n      : undefined;\n\n    await compileSourceFiles(\n      graph,\n      tsConfig,\n      moduleResolutionCache,\n      stylesheetProcessor,\n      {\n        outDir: path.dirname(esm2015),\n        declarationDir: path.dirname(declarations),\n        declaration: true,\n        target: ts.ScriptTarget.ES2015,\n      },\n      ngccProcessor,\n    );\n  } catch (error) {\n    spinner.fail();\n    throw error;\n  }\n\n  spinner.succeed();\n  return graph;\n});\n"]}
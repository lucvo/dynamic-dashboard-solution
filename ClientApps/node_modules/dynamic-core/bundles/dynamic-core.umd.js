(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('tslib'), require('@angular/router'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('dynamic-core', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', 'tslib', '@angular/router', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['dynamic-core'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.tslib, global.ng.router, global.ng.common));
}(this, (function (exports, i0, rxjs, operators, tslib, router, common) { 'use strict';

    var BaseSettingsService = /** @class */ (function () {
        function BaseSettingsService() {
        }
        return BaseSettingsService;
    }());
    BaseSettingsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseSettingsService_Factory() { return new BaseSettingsService(); }, token: BaseSettingsService, providedIn: "root" });
    BaseSettingsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var DashboardService = /** @class */ (function () {
        function DashboardService(settingsService) {
            var _this = this;
            this.settingsService = settingsService;
            this.historyState = [];
            this.subject = new rxjs.BehaviorSubject(this.historyState);
            this.setState = function (tracks) {
                _this.subject.next(tracks);
            };
            this.addItem = function (item) {
                var state = _this.subject.getValue();
                if (state[0].items.indexOf(item) !== -1 || state[1].items.indexOf(item) !== -1) {
                    console.warn('Item with the same id exists on the dashboard.');
                    return;
                }
                state[0].items.length <= state[1].items.length ? state[0].items.push(item) : state[1].items.push(item);
                _this.subject.next(state);
            };
            this.removeItem = function (item) {
                var state = _this.subject.getValue();
                state.forEach(function (track) {
                    track.items.forEach(function (i, index) {
                        if (i === item) {
                            track.items.splice(index, 1);
                        }
                    });
                });
                _this.subject.next(state);
            };
            this.loadContents = function (id) {
                return _this.settingsService.loadSettings(id).pipe(operators.map(function (state) {
                    _this.historyState = state;
                    _this.subject.next(_this.historyState);
                    return state;
                }));
            };
        }
        return DashboardService;
    }());
    DashboardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DashboardService_Factory() { return new DashboardService(i0.ɵɵinject(BaseSettingsService)); }, token: DashboardService, providedIn: "root" });
    DashboardService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    DashboardService.ctorParameters = function () { return [
        { type: BaseSettingsService }
    ]; };

    var LayoutOutletDirective = /** @class */ (function () {
        function LayoutOutletDirective(viewContainerRef) {
            this.viewContainerRef = viewContainerRef;
        }
        return LayoutOutletDirective;
    }());
    LayoutOutletDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[appLayouOutlet]',
                },] }
    ];
    LayoutOutletDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    LayoutOutletDirective.propDecorators = {
        item: [{ type: i0.Input }]
    };

    var DYNAMIC_MODULES_MAP = new i0.InjectionToken('DYNAMIC_MODULES_MAP');

    var BaseLayoutComponent = /** @class */ (function () {
        function BaseLayoutComponent(cd, injector, compiler, service, route, modulesMap) {
            var _this = this;
            this.cd = cd;
            this.injector = injector;
            this.compiler = compiler;
            this.service = service;
            this.route = route;
            this.modulesMap = modulesMap;
            this.containers = [];
            this.loadContents = function () {
                if (!_this.dashboardOutlet || !_this.dashboardOutlet.length) {
                    return;
                }
                _this.dashboardOutlet.forEach(function (template) {
                    _this.cd.detectChanges();
                    _this.loadContent(template, template.item);
                });
                _this.cd.detectChanges();
            };
            this.loadContent = function (template, item) { return tslib.__awaiter(_this, void 0, void 0, function () {
                var viewContainerRef, moduleOrFactory, moduleFactory, moduleRef, rootComponent, factory, componentRef, instance;
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!item.name) {
                                return [2 /*return*/];
                            }
                            viewContainerRef = template.viewContainerRef;
                            viewContainerRef.clear();
                            return [4 /*yield*/, this.modulesMap[item.name].load()];
                        case 1:
                            moduleOrFactory = _a.sent();
                            if (!(moduleOrFactory instanceof i0.NgModuleFactory)) return [3 /*break*/, 2];
                            moduleFactory = moduleOrFactory; // AOT
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.compiler.compileModuleAsync(moduleOrFactory)];
                        case 3:
                            moduleFactory = _a.sent(); // JIT
                            _a.label = 4;
                        case 4:
                            moduleRef = moduleFactory.create(this.injector);
                            console.log(item.cName);
                            rootComponent = moduleFactory.moduleType.entryComponents[item.cName + "ContainerComponent"];
                            factory = moduleRef.componentFactoryResolver.resolveComponentFactory(rootComponent);
                            componentRef = viewContainerRef.createComponent(factory);
                            instance = componentRef.instance;
                            instance.item = item;
                            return [2 /*return*/];
                    }
                });
            }); };
            this.changed = function (items, trackIndex) {
                var state = _this.containers;
                state[trackIndex].items = items;
                _this.service.setState(state);
            };
        }
        BaseLayoutComponent.prototype.ngOnInit = function () {
            var _this = this;
            var id = this.route.snapshot.params['id'];
            this.service.loadContents(id).pipe(operators.tap(function (tracks) { return (_this.containers = tracks); })
            /* Make sure to unsubscribe! */
            )
                .subscribe(function () {
                _this.cd.detectChanges();
                _this.loadContents();
            });
        };
        BaseLayoutComponent.prototype.ngAfterViewInit = function () {
        };
        return BaseLayoutComponent;
    }());
    BaseLayoutComponent.decorators = [
        { type: i0.Component, args: [{
                    template: ' '
                },] }
    ];
    BaseLayoutComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Injector },
        { type: i0.Compiler },
        { type: DashboardService },
        { type: router.ActivatedRoute },
        { type: undefined, decorators: [{ type: i0.Inject, args: [DYNAMIC_MODULES_MAP,] }] }
    ]; };
    BaseLayoutComponent.propDecorators = {
        dashboardOutlet: [{ type: i0.ViewChildren, args: [LayoutOutletDirective,] }]
    };

    var LayoutComponent = /** @class */ (function (_super) {
        tslib.__extends(LayoutComponent, _super);
        function LayoutComponent(cd, injector, compiler, dashboardService, route, modulesMap) {
            return _super.call(this, cd, injector, compiler, dashboardService, route, modulesMap) || this;
        }
        return LayoutComponent;
    }(BaseLayoutComponent));
    LayoutComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'app-layout',
                    template: "<div class=\"p-grid\">\n  <div class=\"p-col\" *ngFor=\"let container of containers\">\n    <div class=\"box\" *ngFor=\"let item of container.items\">\n      <ng-template appLayouOutlet [item]=\"item\"></ng-template>\n    </div>\n  </div>\n</div>",
                    styles: [""]
                },] }
    ];
    LayoutComponent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: i0.Injector },
        { type: i0.Compiler },
        { type: DashboardService },
        { type: router.ActivatedRoute },
        { type: undefined, decorators: [{ type: i0.Inject, args: [DYNAMIC_MODULES_MAP,] }] }
    ]; };

    var TemplateCardComponent = /** @class */ (function () {
        function TemplateCardComponent() {
        }
        return TemplateCardComponent;
    }());
    TemplateCardComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'app-template-card',
                    template: ""
                },] }
    ];

    var TemplateCardContainer = /** @class */ (function () {
        function TemplateCardContainer() {
        }
        return TemplateCardContainer;
    }());
    TemplateCardContainer.decorators = [
        { type: i0.Component, args: [{
                    template: ""
                },] }
    ];
    TemplateCardContainer.propDecorators = {
        item: [{ type: i0.Input }]
    };

    var DynamicLayoutModule = /** @class */ (function () {
        function DynamicLayoutModule() {
        }
        return DynamicLayoutModule;
    }());
    DynamicLayoutModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [BaseLayoutComponent, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer],
                    imports: [common.CommonModule],
                    exports: [BaseLayoutComponent, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer]
                },] }
    ];

    /*
     * Public API Surface of dynamic-core
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BaseLayoutComponent = BaseLayoutComponent;
    exports.BaseSettingsService = BaseSettingsService;
    exports.DYNAMIC_MODULES_MAP = DYNAMIC_MODULES_MAP;
    exports.DashboardService = DashboardService;
    exports.DynamicLayoutModule = DynamicLayoutModule;
    exports.LayoutComponent = LayoutComponent;
    exports.LayoutOutletDirective = LayoutOutletDirective;
    exports.TemplateCardComponent = TemplateCardComponent;
    exports.TemplateCardContainer = TemplateCardContainer;
    exports.ɵa = BaseLayoutComponent;
    exports.ɵb = LayoutComponent;
    exports.ɵc = LayoutOutletDirective;
    exports.ɵd = TemplateCardComponent;
    exports.ɵe = TemplateCardContainer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=dynamic-core.umd.js.map

{"version":3,"sources":["../../dynamic-framework/projects/dynamic-core/src/lib/services/base-settings.service.ts","../../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/dynamic-layout.service.ts","../../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/layout-outlet.directive.ts","../../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/mapped-modules.interface.ts","../../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/BaseLayoutComponent.ts","../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/master-layout/layout.component.ts","../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/template-card/template-card.component.ts","../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/template-card/template-card.container.ts","../../dynamic-framework/projects/dynamic-core/src/lib/dynamic-layout/dynamic-layout.module.ts"],"names":["Injectable","args","providedIn","settingsService","_this","this","historyState","subject","BehaviorSubject","setState","tracks","next","addItem","item","state","getValue","items","indexOf","length","push","console","warn","removeItem","forEach","track","i","index","splice","loadContents","id","loadSettings","pipe","map","BaseSettingsService","viewContainerRef","Directive","selector","ViewContainerRef","Input","DYNAMIC_MODULES_MAP","InjectionToken","BaseLayoutComponent","cd","injector","compiler","service","route","modulesMap","containers","dashboardOutlet","template","detectChanges","loadContent","tslib","__awaiter","name","clear","load","moduleOrFactory","_a","sent","NgModuleFactory","moduleFactory","compileModuleAsync","moduleRef","create","log","cName","rootComponent","moduleType","entryComponents","factory","componentFactoryResolver","resolveComponentFactory","componentRef","createComponent","instance","changed","trackIndex","prototype","ngOnInit","snapshot","params","tap","subscribe","ngAfterViewInit","Component","ChangeDetectorRef","Injector","Compiler","DashboardService","ActivatedRoute","Inject","ViewChildren","LayoutOutletDirective","LayoutComponent","dashboardService","_super","call","__extends","NgModule","declarations","TemplateCardComponent","TemplateCardContainer","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { AbstractClassPart } from '@angular/compiler/src/output/output_ast';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class BaseSettingsService {\n  abstract loadSettings(param: any): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { LayoutContent, PageSetting } from '../models';\nimport { BaseSettingsService } from '../services/base-settings.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { map, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DashboardService {\n\n  historyState: Array<LayoutContent> = [];\n  private subject = new BehaviorSubject<LayoutContent[]>(this.historyState);\n\n  constructor(private settingsService: BaseSettingsService) {\n\n  }\n\n  setState = (tracks: Array<LayoutContent>) => {\n    this.subject.next(tracks);\n  }\n\n  addItem = (item: PageSetting) => {\n    const state = this.subject.getValue();\n\n    if (state[0].items.indexOf(item) !== -1 || state[1].items.indexOf(item) !== -1) {\n      console.warn('Item with the same id exists on the dashboard.');\n      return;\n    }\n\n    state[0].items.length <= state[1].items.length ? state[0].items.push(item) : state[1].items.push(item);\n\n    this.subject.next(state);\n  }\n\n  removeItem = (item: PageSetting) => {\n    const state = this.subject.getValue();\n    state.forEach(track => {\n      track.items.forEach((i, index) => {\n        if (i === item) {\n          track.items.splice(index, 1);\n        }\n      });\n    });\n\n    this.subject.next(state);\n  }\n\n  loadContents = (id: any): Observable<Array<any>> => {\n    return this.settingsService.loadSettings(id).pipe(\n      map((state: Array<LayoutContent>) => {\n        this.historyState = state;\n        this.subject.next(this.historyState);\n        return state;\n      })\n    );\n  }\n}\n","import { Directive, ViewContainerRef, Input } from '@angular/core';\n\n@Directive({\n  selector: '[appLayouOutlet]',\n})\nexport class LayoutOutletDirective {\n  @Input() item;\n\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n","import { NgModuleFactory, Type, InjectionToken } from '@angular/core';\n\nexport interface IMappedModules {\n    [key: string]: { load: () => Promise<NgModuleFactory<any> | Type<any>>; };\n}\n\nexport type DynamicModuleType = Type<any> & {\n    entryComponents: {};\n};\n\nexport const DYNAMIC_MODULES_MAP = new InjectionToken('DYNAMIC_MODULES_MAP');\n","import {\n  OnInit, ViewChildren,\n  QueryList, ChangeDetectorRef,\n  AfterViewInit, Compiler, NgModuleFactory, Injector, Inject, Component\n} from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { LayoutOutletDirective } from './layout-outlet.directive';\nimport { PageSetting, LayoutContent } from '../models';\nimport { DashboardService } from './dynamic-layout.service';\nimport { IMappedModules, DynamicModuleType, DYNAMIC_MODULES_MAP } from './mapped-modules.interface';\nimport { TemplateCardContainer } from './template-card/template-card.container';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  template: ' ',\n})\nexport class BaseLayoutComponent implements OnInit, AfterViewInit {\n  @ViewChildren(LayoutOutletDirective) dashboardOutlet: QueryList<LayoutOutletDirective>;\n\n  containers: Array<LayoutContent> = [];\n  constructor(\n    protected cd: ChangeDetectorRef,\n    protected injector: Injector,\n    protected compiler: Compiler,\n    protected service: DashboardService,\n    private route: ActivatedRoute,\n    @Inject(DYNAMIC_MODULES_MAP) protected modulesMap: IMappedModules\n  ) { }\n\n  ngOnInit(): void {\n    const id = this.route.snapshot.params['id'];\n    this.service.loadContents(id).pipe(\n      tap(tracks => (this.containers = tracks))\n      /* Make sure to unsubscribe! */\n    )\n    .subscribe(() => {\n      this.cd.detectChanges();\n      this.loadContents();\n    });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  loadContents = () => {\n    if (!this.dashboardOutlet || !this.dashboardOutlet.length) {\n      return;\n    }\n    this.dashboardOutlet.forEach(template => {\n      this.cd.detectChanges();\n      this.loadContent(template, template.item);\n    });\n    this.cd.detectChanges();\n  }\n\n  loadContent = async (template: LayoutOutletDirective, item: PageSetting) => {\n    if (!item.name) {\n      return;\n    }\n\n    const viewContainerRef = template.viewContainerRef;\n    viewContainerRef.clear();\n    const moduleOrFactory = await this.modulesMap[item.name].load();\n    let moduleFactory;\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      moduleFactory = moduleOrFactory; // AOT\n    } else {\n      moduleFactory = await this.compiler.compileModuleAsync(moduleOrFactory); // JIT\n    }\n    const moduleRef = moduleFactory.create(this.injector);\n    console.log(item.cName);\n    const rootComponent = (moduleFactory.moduleType as DynamicModuleType).entryComponents[`${item.cName}ContainerComponent`];\n    const factory = moduleRef.componentFactoryResolver.resolveComponentFactory(rootComponent);\n    const componentRef = viewContainerRef.createComponent(factory);\n    const instance = componentRef.instance as TemplateCardContainer;\n    instance.item = item;\n  }\n\n  changed = (items: Array<PageSetting>, trackIndex: number) => {\n    const state = this.containers;\n    state[trackIndex].items = items as Array<PageSetting>;\n    this.service.setState(state);\n  }\n}\n","import {\n  Component, ChangeDetectorRef,\n  Compiler, Injector, Inject\n} from '@angular/core';\n\nimport { DashboardService } from '../dynamic-layout.service';\nimport { IMappedModules, DYNAMIC_MODULES_MAP } from '../mapped-modules.interface';\nimport { BaseLayoutComponent } from '../BaseLayoutComponent';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent extends BaseLayoutComponent {\n\n  constructor(\n    cd: ChangeDetectorRef,\n    injector: Injector,\n    compiler: Compiler,\n    dashboardService: DashboardService,\n    route: ActivatedRoute,\n    @Inject(DYNAMIC_MODULES_MAP) modulesMap: IMappedModules\n  ) {\n    super(cd, injector, compiler, dashboardService, route, modulesMap);\n  }\n}\n\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-template-card',\n  template: ``,\n})\nexport class TemplateCardComponent {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  template: ``,\n})\nexport class TemplateCardContainer {\n  @Input() item;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer, BaseLayoutComponent } from '.';\n\n@NgModule({\n  declarations: [BaseLayoutComponent, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer],\n  imports: [CommonModule],\n  exports: [BaseLayoutComponent, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer]\n})\nexport class DynamicLayoutModule { }\n"]}
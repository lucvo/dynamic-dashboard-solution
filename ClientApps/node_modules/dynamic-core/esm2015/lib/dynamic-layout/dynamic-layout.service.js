import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { BaseSettingsService } from '../services/base-settings.service';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./index";
import * as i2 from "../services/base-settings.service";
export class DashboardService {
    constructor(settingsService) {
        this.settingsService = settingsService;
        this.historyState = [];
        this.subject = new BehaviorSubject(this.historyState);
        this.setState = (tracks) => {
            this.subject.next(tracks);
        };
        this.addItem = (item) => {
            const state = this.subject.getValue();
            if (state[0].items.indexOf(item) !== -1 || state[1].items.indexOf(item) !== -1) {
                console.warn('Item with the same id exists on the dashboard.');
                return;
            }
            state[0].items.length <= state[1].items.length ? state[0].items.push(item) : state[1].items.push(item);
            this.subject.next(state);
        };
        this.removeItem = (item) => {
            const state = this.subject.getValue();
            state.forEach(track => {
                track.items.forEach((i, index) => {
                    if (i === item) {
                        track.items.splice(index, 1);
                    }
                });
            });
            this.subject.next(state);
        };
        this.loadContents = (id) => {
            return this.settingsService.loadSettings(id).pipe(map((state) => {
                this.historyState = state;
                this.subject.next(this.historyState);
                return state;
            }));
        };
    }
}
DashboardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DashboardService_Factory() { return new i1.DashboardService(i0.ɵɵinject(i2.BaseSettingsService)); }, token: i1.DashboardService, providedIn: "root" });
DashboardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
DashboardService.ctorParameters = () => [
    { type: BaseSettingsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1sYXlvdXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9keW5hbWljLWZyYW1ld29yay9wcm9qZWN0cy9keW5hbWljLWNvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtbGF5b3V0L2R5bmFtaWMtbGF5b3V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxHQUFHLEVBQU8sTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQU0xQyxNQUFNLE9BQU8sZ0JBQWdCO0lBSzNCLFlBQW9CLGVBQW9DO1FBQXBDLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQUh4RCxpQkFBWSxHQUF5QixFQUFFLENBQUM7UUFDaEMsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFrQixJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFNMUUsYUFBUSxHQUFHLENBQUMsTUFBNEIsRUFBRSxFQUFFO1lBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQTtRQUVELFlBQU8sR0FBRyxDQUFDLElBQWlCLEVBQUUsRUFBRTtZQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXRDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQzlFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQztnQkFDL0QsT0FBTzthQUNSO1lBRUQsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV2RyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUE7UUFFRCxlQUFVLEdBQUcsQ0FBQyxJQUFpQixFQUFFLEVBQUU7WUFDakMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNwQixLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtvQkFDL0IsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO3dCQUNkLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDOUI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQTtRQUVELGlCQUFZLEdBQUcsQ0FBQyxFQUFPLEVBQTBCLEVBQUU7WUFDakQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQy9DLEdBQUcsQ0FBQyxDQUFDLEtBQTJCLEVBQUUsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDckMsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFBO0lBeENELENBQUM7Ozs7WUFWRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVBRLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IExheW91dENvbnRlbnQsIFBhZ2VTZXR0aW5nIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IEJhc2VTZXR0aW5nc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9iYXNlLXNldHRpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9PYnNlcnZhYmxlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZFNlcnZpY2Uge1xuXG4gIGhpc3RvcnlTdGF0ZTogQXJyYXk8TGF5b3V0Q29udGVudD4gPSBbXTtcbiAgcHJpdmF0ZSBzdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxMYXlvdXRDb250ZW50W10+KHRoaXMuaGlzdG9yeVN0YXRlKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNldHRpbmdzU2VydmljZTogQmFzZVNldHRpbmdzU2VydmljZSkge1xuXG4gIH1cblxuICBzZXRTdGF0ZSA9ICh0cmFja3M6IEFycmF5PExheW91dENvbnRlbnQ+KSA9PiB7XG4gICAgdGhpcy5zdWJqZWN0Lm5leHQodHJhY2tzKTtcbiAgfVxuXG4gIGFkZEl0ZW0gPSAoaXRlbTogUGFnZVNldHRpbmcpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3ViamVjdC5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKHN0YXRlWzBdLml0ZW1zLmluZGV4T2YoaXRlbSkgIT09IC0xIHx8IHN0YXRlWzFdLml0ZW1zLmluZGV4T2YoaXRlbSkgIT09IC0xKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0l0ZW0gd2l0aCB0aGUgc2FtZSBpZCBleGlzdHMgb24gdGhlIGRhc2hib2FyZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZVswXS5pdGVtcy5sZW5ndGggPD0gc3RhdGVbMV0uaXRlbXMubGVuZ3RoID8gc3RhdGVbMF0uaXRlbXMucHVzaChpdGVtKSA6IHN0YXRlWzFdLml0ZW1zLnB1c2goaXRlbSk7XG5cbiAgICB0aGlzLnN1YmplY3QubmV4dChzdGF0ZSk7XG4gIH1cblxuICByZW1vdmVJdGVtID0gKGl0ZW06IFBhZ2VTZXR0aW5nKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN1YmplY3QuZ2V0VmFsdWUoKTtcbiAgICBzdGF0ZS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgIHRyYWNrLml0ZW1zLmZvckVhY2goKGksIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpID09PSBpdGVtKSB7XG4gICAgICAgICAgdHJhY2suaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnN1YmplY3QubmV4dChzdGF0ZSk7XG4gIH1cblxuICBsb2FkQ29udGVudHMgPSAoaWQ6IGFueSk6IE9ic2VydmFibGU8QXJyYXk8YW55Pj4gPT4ge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzU2VydmljZS5sb2FkU2V0dGluZ3MoaWQpLnBpcGUoXG4gICAgICBtYXAoKHN0YXRlOiBBcnJheTxMYXlvdXRDb250ZW50PikgPT4ge1xuICAgICAgICB0aGlzLmhpc3RvcnlTdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnN1YmplY3QubmV4dCh0aGlzLmhpc3RvcnlTdGF0ZSk7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19
import { __awaiter } from "tslib";
import { ViewChildren, ChangeDetectorRef, Compiler, NgModuleFactory, Injector, Inject, Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { LayoutOutletDirective } from './layout-outlet.directive';
import { DashboardService } from './dynamic-layout.service';
import { DYNAMIC_MODULES_MAP } from './mapped-modules.interface';
import { ActivatedRoute } from '@angular/router';
export class BaseLayoutComponent {
    constructor(cd, injector, compiler, service, route, modulesMap) {
        this.cd = cd;
        this.injector = injector;
        this.compiler = compiler;
        this.service = service;
        this.route = route;
        this.modulesMap = modulesMap;
        this.containers = [];
        this.loadContents = () => {
            if (!this.dashboardOutlet || !this.dashboardOutlet.length) {
                return;
            }
            this.dashboardOutlet.forEach(template => {
                this.cd.detectChanges();
                this.loadContent(template, template.item);
            });
            this.cd.detectChanges();
        };
        this.loadContent = (template, item) => __awaiter(this, void 0, void 0, function* () {
            if (!item.name) {
                return;
            }
            const viewContainerRef = template.viewContainerRef;
            viewContainerRef.clear();
            const moduleOrFactory = yield this.modulesMap[item.name].load();
            let moduleFactory;
            if (moduleOrFactory instanceof NgModuleFactory) {
                moduleFactory = moduleOrFactory; // AOT
            }
            else {
                moduleFactory = yield this.compiler.compileModuleAsync(moduleOrFactory); // JIT
            }
            const moduleRef = moduleFactory.create(this.injector);
            console.log(item.cName);
            const rootComponent = moduleFactory.moduleType.entryComponents[`${item.cName}ContainerComponent`];
            const factory = moduleRef.componentFactoryResolver.resolveComponentFactory(rootComponent);
            const componentRef = viewContainerRef.createComponent(factory);
            const instance = componentRef.instance;
            instance.item = item;
        });
        this.changed = (items, trackIndex) => {
            const state = this.containers;
            state[trackIndex].items = items;
            this.service.setState(state);
        };
    }
    ngOnInit() {
        const id = this.route.snapshot.params['id'];
        this.service.loadContents(id).pipe(tap(tracks => (this.containers = tracks))
        /* Make sure to unsubscribe! */
        )
            .subscribe(() => {
            this.cd.detectChanges();
            this.loadContents();
        });
    }
    ngAfterViewInit() {
    }
}
BaseLayoutComponent.decorators = [
    { type: Component, args: [{
                template: ' '
            },] }
];
BaseLayoutComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: Compiler },
    { type: DashboardService },
    { type: ActivatedRoute },
    { type: undefined, decorators: [{ type: Inject, args: [DYNAMIC_MODULES_MAP,] }] }
];
BaseLayoutComponent.propDecorators = {
    dashboardOutlet: [{ type: ViewChildren, args: [LayoutOutletDirective,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUxheW91dENvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9keW5hbWljLWZyYW1ld29yay9wcm9qZWN0cy9keW5hbWljLWNvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtbGF5b3V0L0Jhc2VMYXlvdXRDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDRyxZQUFZLEVBQ1QsaUJBQWlCLEVBQ2IsUUFBUSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFDdEUsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBcUMsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVwRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLakQsTUFBTSxPQUFPLG1CQUFtQjtJQUk5QixZQUNZLEVBQXFCLEVBQ3JCLFFBQWtCLEVBQ2xCLFFBQWtCLEVBQ2xCLE9BQXlCLEVBQzNCLEtBQXFCLEVBQ1UsVUFBMEI7UUFMdkQsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQzNCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ1UsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7UUFQbkUsZUFBVSxHQUF5QixFQUFFLENBQUM7UUF5QnRDLGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFN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QVE7WUFBbkMsUUFBUTtZQUtoQixnQkFBZ0I7WUFHaEIsY0FBYzs0Q0FlbEIsTUFBTSxTQUFDLG1CQUFtQjs7OzhCQVQ1QixZQUFZLFNBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgT25Jbml0LCBWaWV3Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIEFmdGVyVmlld0luaXQsIENvbXBpbGVyLCBOZ01vZHVsZUZhY3RvcnksIEluamVjdG9yLCBJbmplY3QsIENvbXBvbmVudFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IExheW91dE91dGxldERpcmVjdGl2ZSB9IGZyb20gJy4vbGF5b3V0LW91dGxldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUGFnZVNldHRpbmcsIExheW91dENvbnRlbnQgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgRGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vZHluYW1pYy1sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBJTWFwcGVkTW9kdWxlcywgRHluYW1pY01vZHVsZVR5cGUsIERZTkFNSUNfTU9EVUxFU19NQVAgfSBmcm9tICcuL21hcHBlZC1tb2R1bGVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUZW1wbGF0ZUNhcmRDb250YWluZXIgfSBmcm9tICcuL3RlbXBsYXRlLWNhcmQvdGVtcGxhdGUtY2FyZC5jb250YWluZXInO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6ICcgJyxcbn0pXG5leHBvcnQgY2xhc3MgQmFzZUxheW91dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBWaWV3Q2hpbGRyZW4oTGF5b3V0T3V0bGV0RGlyZWN0aXZlKSBkYXNoYm9hcmRPdXRsZXQ6IFF1ZXJ5TGlzdDxMYXlvdXRPdXRsZXREaXJlY3RpdmU+O1xuXG4gIGNvbnRhaW5lcnM6IEFycmF5PExheW91dENvbnRlbnQ+ID0gW107XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcm90ZWN0ZWQgY29tcGlsZXI6IENvbXBpbGVyLFxuICAgIHByb3RlY3RlZCBzZXJ2aWNlOiBEYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIEBJbmplY3QoRFlOQU1JQ19NT0RVTEVTX01BUCkgcHJvdGVjdGVkIG1vZHVsZXNNYXA6IElNYXBwZWRNb2R1bGVzXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgY29uc3QgaWQgPSB0aGlzLnJvdXRlLnNuYXBzaG90LnBhcmFtc1snaWQnXTtcbiAgICB0aGlzLnNlcnZpY2UubG9hZENvbnRlbnRzKGlkKS5waXBlKFxuICAgICAgdGFwKHRyYWNrcyA9PiAodGhpcy5jb250YWluZXJzID0gdHJhY2tzKSlcbiAgICAgIC8qIE1ha2Ugc3VyZSB0byB1bnN1YnNjcmliZSEgKi9cbiAgICApXG4gICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIHRoaXMubG9hZENvbnRlbnRzKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gIH1cblxuICBsb2FkQ29udGVudHMgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLmRhc2hib2FyZE91dGxldCB8fCAhdGhpcy5kYXNoYm9hcmRPdXRsZXQubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGFzaGJvYXJkT3V0bGV0LmZvckVhY2godGVtcGxhdGUgPT4ge1xuICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB0aGlzLmxvYWRDb250ZW50KHRlbXBsYXRlLCB0ZW1wbGF0ZS5pdGVtKTtcbiAgICB9KTtcbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIGxvYWRDb250ZW50ID0gYXN5bmMgKHRlbXBsYXRlOiBMYXlvdXRPdXRsZXREaXJlY3RpdmUsIGl0ZW06IFBhZ2VTZXR0aW5nKSA9PiB7XG4gICAgaWYgKCFpdGVtLm5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB2aWV3Q29udGFpbmVyUmVmID0gdGVtcGxhdGUudmlld0NvbnRhaW5lclJlZjtcbiAgICB2aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XG4gICAgY29uc3QgbW9kdWxlT3JGYWN0b3J5ID0gYXdhaXQgdGhpcy5tb2R1bGVzTWFwW2l0ZW0ubmFtZV0ubG9hZCgpO1xuICAgIGxldCBtb2R1bGVGYWN0b3J5O1xuICAgIGlmIChtb2R1bGVPckZhY3RvcnkgaW5zdGFuY2VvZiBOZ01vZHVsZUZhY3RvcnkpIHtcbiAgICAgIG1vZHVsZUZhY3RvcnkgPSBtb2R1bGVPckZhY3Rvcnk7IC8vIEFPVFxuICAgIH0gZWxzZSB7XG4gICAgICBtb2R1bGVGYWN0b3J5ID0gYXdhaXQgdGhpcy5jb21waWxlci5jb21waWxlTW9kdWxlQXN5bmMobW9kdWxlT3JGYWN0b3J5KTsgLy8gSklUXG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVJlZiA9IG1vZHVsZUZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xuICAgIGNvbnNvbGUubG9nKGl0ZW0uY05hbWUpO1xuICAgIGNvbnN0IHJvb3RDb21wb25lbnQgPSAobW9kdWxlRmFjdG9yeS5tb2R1bGVUeXBlIGFzIER5bmFtaWNNb2R1bGVUeXBlKS5lbnRyeUNvbXBvbmVudHNbYCR7aXRlbS5jTmFtZX1Db250YWluZXJDb21wb25lbnRgXTtcbiAgICBjb25zdCBmYWN0b3J5ID0gbW9kdWxlUmVmLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShyb290Q29tcG9uZW50KTtcbiAgICBjb25zdCBjb21wb25lbnRSZWYgPSB2aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBUZW1wbGF0ZUNhcmRDb250YWluZXI7XG4gICAgaW5zdGFuY2UuaXRlbSA9IGl0ZW07XG4gIH1cblxuICBjaGFuZ2VkID0gKGl0ZW1zOiBBcnJheTxQYWdlU2V0dGluZz4sIHRyYWNrSW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5jb250YWluZXJzO1xuICAgIHN0YXRlW3RyYWNrSW5kZXhdLml0ZW1zID0gaXRlbXMgYXMgQXJyYXk8UGFnZVNldHRpbmc+O1xuICAgIHRoaXMuc2VydmljZS5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cbn1cbiJdfQ==
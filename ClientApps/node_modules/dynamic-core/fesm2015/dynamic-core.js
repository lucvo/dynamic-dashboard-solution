import { ɵɵdefineInjectable, Injectable, ɵɵinject, Directive, ViewContainerRef, Input, InjectionToken, NgModuleFactory, Component, ChangeDetectorRef, Injector, Compiler, Inject, ViewChildren, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { __awaiter } from 'tslib';
import { ActivatedRoute } from '@angular/router';
import { CommonModule } from '@angular/common';

class BaseSettingsService {
}
BaseSettingsService.ɵprov = ɵɵdefineInjectable({ factory: function BaseSettingsService_Factory() { return new BaseSettingsService(); }, token: BaseSettingsService, providedIn: "root" });
BaseSettingsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];

class DashboardService {
    constructor(settingsService) {
        this.settingsService = settingsService;
        this.historyState = [];
        this.subject = new BehaviorSubject(this.historyState);
        this.setState = (tracks) => {
            this.subject.next(tracks);
        };
        this.addItem = (item) => {
            const state = this.subject.getValue();
            if (state[0].items.indexOf(item) !== -1 || state[1].items.indexOf(item) !== -1) {
                console.warn('Item with the same id exists on the dashboard.');
                return;
            }
            state[0].items.length <= state[1].items.length ? state[0].items.push(item) : state[1].items.push(item);
            this.subject.next(state);
        };
        this.removeItem = (item) => {
            const state = this.subject.getValue();
            state.forEach(track => {
                track.items.forEach((i, index) => {
                    if (i === item) {
                        track.items.splice(index, 1);
                    }
                });
            });
            this.subject.next(state);
        };
        this.loadContents = (id) => {
            return this.settingsService.loadSettings(id).pipe(map((state) => {
                this.historyState = state;
                this.subject.next(this.historyState);
                return state;
            }));
        };
    }
}
DashboardService.ɵprov = ɵɵdefineInjectable({ factory: function DashboardService_Factory() { return new DashboardService(ɵɵinject(BaseSettingsService)); }, token: DashboardService, providedIn: "root" });
DashboardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
DashboardService.ctorParameters = () => [
    { type: BaseSettingsService }
];

class LayoutOutletDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
}
LayoutOutletDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appLayouOutlet]',
            },] }
];
LayoutOutletDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
LayoutOutletDirective.propDecorators = {
    item: [{ type: Input }]
};

const DYNAMIC_MODULES_MAP = new InjectionToken('DYNAMIC_MODULES_MAP');

class BaseLayoutComponent {
    constructor(cd, injector, compiler, service, route, modulesMap) {
        this.cd = cd;
        this.injector = injector;
        this.compiler = compiler;
        this.service = service;
        this.route = route;
        this.modulesMap = modulesMap;
        this.containers = [];
        this.loadContents = () => {
            if (!this.dashboardOutlet || !this.dashboardOutlet.length) {
                return;
            }
            this.dashboardOutlet.forEach(template => {
                this.cd.detectChanges();
                this.loadContent(template, template.item);
            });
            this.cd.detectChanges();
        };
        this.loadContent = (template, item) => __awaiter(this, void 0, void 0, function* () {
            if (!item.name) {
                return;
            }
            const viewContainerRef = template.viewContainerRef;
            viewContainerRef.clear();
            const moduleOrFactory = yield this.modulesMap[item.name].load();
            let moduleFactory;
            if (moduleOrFactory instanceof NgModuleFactory) {
                moduleFactory = moduleOrFactory; // AOT
            }
            else {
                moduleFactory = yield this.compiler.compileModuleAsync(moduleOrFactory); // JIT
            }
            const moduleRef = moduleFactory.create(this.injector);
            console.log(item.cName);
            const rootComponent = moduleFactory.moduleType.entryComponents[`${item.cName}ContainerComponent`];
            const factory = moduleRef.componentFactoryResolver.resolveComponentFactory(rootComponent);
            const componentRef = viewContainerRef.createComponent(factory);
            const instance = componentRef.instance;
            instance.item = item;
        });
        this.changed = (items, trackIndex) => {
            const state = this.containers;
            state[trackIndex].items = items;
            this.service.setState(state);
        };
    }
    ngOnInit() {
        const id = this.route.snapshot.params['id'];
        this.service.loadContents(id).pipe(tap(tracks => (this.containers = tracks))
        /* Make sure to unsubscribe! */
        )
            .subscribe(() => {
            this.cd.detectChanges();
            this.loadContents();
        });
    }
    ngAfterViewInit() {
    }
}
BaseLayoutComponent.decorators = [
    { type: Component, args: [{
                template: ' '
            },] }
];
BaseLayoutComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: Compiler },
    { type: DashboardService },
    { type: ActivatedRoute },
    { type: undefined, decorators: [{ type: Inject, args: [DYNAMIC_MODULES_MAP,] }] }
];
BaseLayoutComponent.propDecorators = {
    dashboardOutlet: [{ type: ViewChildren, args: [LayoutOutletDirective,] }]
};

class LayoutComponent extends BaseLayoutComponent {
    constructor(cd, injector, compiler, dashboardService, route, modulesMap) {
        super(cd, injector, compiler, dashboardService, route, modulesMap);
    }
}
LayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-layout',
                template: "<div class=\"p-grid\">\n  <div class=\"p-col\" *ngFor=\"let container of containers\">\n    <div class=\"box\" *ngFor=\"let item of container.items\">\n      <ng-template appLayouOutlet [item]=\"item\"></ng-template>\n    </div>\n  </div>\n</div>",
                styles: [""]
            },] }
];
LayoutComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: Compiler },
    { type: DashboardService },
    { type: ActivatedRoute },
    { type: undefined, decorators: [{ type: Inject, args: [DYNAMIC_MODULES_MAP,] }] }
];

class TemplateCardComponent {
}
TemplateCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-template-card',
                template: ``
            },] }
];

class TemplateCardContainer {
}
TemplateCardContainer.decorators = [
    { type: Component, args: [{
                template: ``
            },] }
];
TemplateCardContainer.propDecorators = {
    item: [{ type: Input }]
};

class DynamicLayoutModule {
}
DynamicLayoutModule.decorators = [
    { type: NgModule, args: [{
                declarations: [BaseLayoutComponent, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer],
                imports: [CommonModule],
                exports: [BaseLayoutComponent, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer]
            },] }
];

/*
 * Public API Surface of dynamic-core
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BaseLayoutComponent, BaseSettingsService, DYNAMIC_MODULES_MAP, DashboardService, DynamicLayoutModule, LayoutComponent, LayoutOutletDirective, TemplateCardComponent, TemplateCardContainer, BaseLayoutComponent as ɵa, LayoutComponent as ɵb, LayoutOutletDirective as ɵc, TemplateCardComponent as ɵd, TemplateCardContainer as ɵe };
//# sourceMappingURL=dynamic-core.js.map

{"version":3,"sources":["../../../src/app/components/confirmpopup/confirmpopup.ts"],"names":["ConfirmPopup","el","confirmationService","renderer","cd","config","_this","this","showTransitionOptions","hideTransitionOptions","autoZIndex","baseZIndex","subscription","requireConfirmation$","subscribe","confirmation","key","accept","acceptEvent","EventEmitter","reject","rejectEvent","visible","hide","Object","defineProperty","prototype","_visible","value","markForCheck","onAnimationStart","event","toState","container","element","document","body","appendChild","align","bindListeners","onAnimationEnd","onContainerDestroy","style","zIndex","String","DomHandler","zindex","absolutePosition","target","getOffset","top","addClass","Math","floor","left","emit","bindDocumentClickListener","bindDocumentResizeListener","bindScrollListener","unbindListeners","unbindDocumentClickListener","unbindDocumentResizeListener","unbindScrollListener","documentClickListener","documentEvent","isIOS","documentTarget","nativeElement","ownerDocument","listen","targetElement","contains","onWindowResize","documentResizeListener","bind","window","addEventListener","removeEventListener","scrollHandler","ConnectedOverlayScrollHandler","unsubscribeConfirmationSubscriptions","unsubscribe","acceptLabel","getTranslation","TranslationKeys","ACCEPT","rejectLabel","REJECT","ngOnDestroy","Component","args","selector","template","animations","trigger","state","transform","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ConfirmationService","Renderer2","ChangeDetectorRef","PrimeNGConfig","Input","NgModule","imports","CommonModule","ButtonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule ,Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, OnDestroy, Input, EventEmitter, Renderer2} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Confirmation, ConfirmationService, PrimeNGConfig, TranslationKeys} from 'primeng/api';\nimport {Subscription} from 'rxjs';\nimport {ButtonModule} from 'primeng/button';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {DomHandler, ConnectedOverlayScrollHandler} from 'primeng/dom';\n\n@Component({\n    selector: 'p-confirmPopup',\n    template: `\n        <div *ngIf=\"visible\" [ngClass]=\"'p-confirm-popup p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            [@animation]=\"{value: 'open', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n            (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\">\n            <div #content class=\"p-confirm-popup-content\">\n                <i [ngClass]=\"'p-confirm-popup-icon'\" [class]=\"confirmation.icon\" *ngIf=\"confirmation.icon\"></i>\n                <span class=\"p-confirm-popup-message\">{{confirmation.message}}</span>\n            </div>\n            <div class=\"p-confirm-popup-footer\">\n                <button type=\"button\" pButton [icon]=\"confirmation.rejectIcon\" [label]=\"rejectButtonLabel\" (click)=\"reject()\" [ngClass]=\"'p-confirm-popup-reject p-button-sm'\" \n                    [class]=\"confirmation.rejectButtonStyleClass || 'p-button-text'\" *ngIf=\"confirmation.rejectVisible !== false\" [attr.aria-label]=\"rejectButtonLabel\"></button>\n                <button type=\"button\" pButton [icon]=\"confirmation.acceptIcon\" [label]=\"acceptButtonLabel\" (click)=\"accept()\" [ngClass]=\"'p-confirm-popup-accept p-button-sm'\" \n                    [class]=\"confirmation.acceptButtonStyleClass\" *ngIf=\"confirmation.acceptVisible !== false\" [attr.aria-label]=\"acceptButtonLabel\"></button>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'scaleY(0.8)',\n                opacity: 0\n            })),\n            state('open', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => open', animate('{{showTransitionParams}}')),\n            transition('open => void', animate('{{hideTransitionParams}}')),\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./confirmpopup.css']\n})\nexport class ConfirmPopup implements OnDestroy {\n\n    @Input() key: string;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    container: HTMLDivElement;\n\n    subscription: Subscription;\n\n    confirmation: Confirmation;\n\n    _visible: boolean;\n\n    documentClickListener: any;\n\n    documentResizeListener: any;\n\n    scrollHandler: any;\n\n    @Input() get visible(): any {\n        return this._visible;\n    }\n    set visible(value:any) {\n        this._visible = value;\n        this.cd.markForCheck();\n    }\n\n    constructor(public el: ElementRef, private confirmationService: ConfirmationService, public renderer: Renderer2, private cd: ChangeDetectorRef, public config: PrimeNGConfig) {\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (!confirmation) {\n                this.hide();\n                return;\n            }\n\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n    \n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n    \n                this.visible = true;\n            }\n        });\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        if (event.toState === 'open') {\n            this.container = event.element;\n            document.body.appendChild(this.container);\n            this.align();\n            this.bindListeners();\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'void':\n                this.onContainerDestroy();\n            break;\n        }\n    }\n\n    align() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n\n        DomHandler.absolutePosition(this.container, this.confirmation.target);\n        if (DomHandler.getOffset(this.container).top < DomHandler.getOffset(this.confirmation.target).top) {\n            DomHandler.addClass(this.container, 'p-confirm-popup-flipped');\n        }\n\n        if (Math.floor(DomHandler.getOffset(this.container).left) < Math.floor(DomHandler.getOffset(this.confirmation.target).left) &&\n            DomHandler.getOffset(this.container).left > 0) {\n            DomHandler.addClass(this.container, 'p-confirm-popup-shifted');\n        }\n    }\n   \n    hide() {\n        this.visible = false;\n    }\n\n    accept() {\n        if (this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n\n        this.hide();\n    }\n\n    reject() {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n\n        this.hide();\n    }\n\n    bindListeners() {\n        this.bindDocumentClickListener();\n        this.bindDocumentResizeListener();\n        this.bindScrollListener();\n    }\n\n    unbindListeners() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : document;\n\n            this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, (event) => {\n                let targetElement = <HTMLElement> this.confirmation.target;\n                if (this.container !== event.target && !this.container.contains(event.target) && \n                    targetElement !== event.target && !targetElement.contains(event.target)) {\n                    this.hide();\n                }\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.confirmation.target, () => {\n                if (this.visible) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    unsubscribeConfirmationSubscriptions() {\n        if (this.confirmation) {\n            if (this.confirmation.acceptEvent) {\n                this.confirmation.acceptEvent.unsubscribe();\n            }\n    \n            if (this.confirmation.rejectEvent) {\n                this.confirmation.rejectEvent.unsubscribe();\n            }\n        }\n    }\n\n    onContainerDestroy() {\n        this.unbindListeners();\n        this.unsubscribeConfirmationSubscriptions();\n        this.confirmation = null;\n        this.container = null;\n    }\n\n    get acceptButtonLabel(): string {\n        return this.confirmation.acceptLabel || this.config.getTranslation(TranslationKeys.ACCEPT);\n    }\n\n    get rejectButtonLabel(): string {\n        return this.confirmation.rejectLabel || this.config.getTranslation(TranslationKeys.REJECT);\n    }\n\n    ngOnDestroy() {\n        this.onContainerDestroy();\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule],\n    exports: [ConfirmPopup],\n    declarations: [ConfirmPopup]\n})\nexport class ConfirmPopupModule { }\n"]}